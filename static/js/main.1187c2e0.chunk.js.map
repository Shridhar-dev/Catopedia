{"version":3,"sources":["App.js","header.js","serviceWorker.js","index.js"],"names":["st","marginLeft","sty","padding","App","state","cat","handleChange","bind","fetch","then","response","json","data","setState","url","this","src","height","width","style","onClick","React","Component","styles","color","backgroundColor","textAlign","margin","fontSize","styler","stylers","Header","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4MAIMA,G,KAAI,CACNC,WAAa,MAIXC,EAAK,CACPD,WAAa,IACbE,QAAQ,IAsCGC,E,kDAhCX,aAAc,IAAD,8BACT,gBACKC,MAAM,CACPC,IAAI,IAER,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBALX,E,2DAOE,IAAD,OAEVC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GACF,EAAKC,SAAS,CACVR,IAAKO,EAAK,GAAGE,W,+BAKRC,KAAKX,MAAMC,IACxB,OACI,6BACA,yBAAKW,IAAKD,KAAKX,MAAMC,IAAKY,OAAO,MAAMC,MAAM,MAAMC,MAAOpB,IAE1D,6BACD,4BAAQqB,QAAUL,KAAKT,aAAca,MAAOlB,GAA5C,YACC,6BACA,kC,GA3BMoB,IAAMC,WCZlBC,EAAS,CACXC,MAAQ,QACRC,gBAAkB,QAClBC,UAAW,SACXC,OAAO,EACPC,SAAS,IAEPC,EAAS,CACXH,UAAY,SACZE,SAAW,IAGTE,EAAU,CACZJ,UAAY,SACZE,SAAW,IAaAG,MAVf,WACI,OACI,6BACA,wBAAIZ,MAAOI,GAAX,yBACA,uBAAGJ,MAAOU,GAAV,2BAEA,uBAAGV,MAAOW,GAAV,yCCfYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,OAGNC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1187c2e0.chunk.js","sourcesContent":["import React from 'react';\n\nimport './App.css';\n\nconst st ={\n    marginLeft : 430\n    \n}\n\nconst sty ={\n    marginLeft : 650,\n    padding:10\n    \n}\n\n\nclass App extends React.Component{\n    constructor(){\n        super()\n        this.state={\n            cat:[]\n        }\n        this.handleChange = this.handleChange.bind(this)\n    }\n    handleChange(){\n        \n        fetch(\"https://api.thecatapi.com/v1/images/search\")\n        .then(response =>response.json())\n        .then(data => {\n            this.setState({\n                cat: data[0].url\n            })\n        })\n    }\n    render(){\n        const text = this.state.cat\n        return(\n            <div>\n            <img src={this.state.cat} height=\"500\" width=\"500\" style={st} />\n            \n            <br />\n           <button onClick ={this.handleChange} style={sty}>Generate</button>\n            <br />\n            <br />\n            </div>\n        )\n    }\n\n}\nexport default App;\n","import React from 'react';\r\n\r\nimport './App.css';\r\n\r\nconst styles = {\r\n    color : \"white\",\r\n    backgroundColor : \"black\",\r\n    textAlign: \"center\",\r\n    margin:0,\r\n    fontSize:50\r\n}\r\nconst styler = {\r\n    textAlign : \"center\",\r\n    fontSize : 50\r\n}\r\n\r\nconst stylers = {\r\n    textAlign : \"center\",\r\n    fontSize : 30\r\n}\r\n\r\nfunction Header(){\r\n    return(\r\n        <div>\r\n        <h1 style={styles}>CatopediaðŸ˜º</h1>\r\n        <p style={styler}>For all the cat lovers!</p>\r\n        \r\n        <p style={stylers}>click the generate button for a cat</p>\r\n        </div>\r\n    )\r\n}\r\nexport default Header;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Header from './header';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <div>\n        <Header />\n        <App />\n    </div>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}